'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over n divisors?

'''
import time
import math

def calişma_suresi(func, *args):
    baslangic_zamani=time.time()

    func(*args)

    bitis_zamani=time.time()

    return bitis_zamani-baslangic_zamani



def çarpanbul(n):
    çarpan=0
    sqrt_n = int(math.sqrt(n))

    for i in range(1,sqrt_n+1):
        if n%i==0:
            çarpan+=1
            if i != n // i:
                çarpan += 1

    return çarpan



def divisibleTriangleNumber(n):
    toplam=0
    i=1
    çarpansayisi=0
    while çarpansayisi<=n:
        toplam+=i
        çarpansayisi=çarpanbul(toplam)
        #print("{} sayisinin çarpan sayisi ={} ".format(toplam,çarpansayisi))
        i+=1
    print(toplam)
    return toplam


print(f"Çalişma süresi: {calişma_suresi(divisibleTriangleNumber, 500)} saniye")





'''

import time
import math

# Çarpan sayısını bulmak için daha verimli bir yöntem
def carpansayisi(n):
    count = 0
    sqrt_n = int(math.sqrt(n))
    
    for i in range(1, sqrt_n + 1):
        if n % i == 0:
            count += 1
            if i != n // i:  # i ve n // i farklı ise, her iki çarpanı da sayıyoruz
                count += 1
    return count

def divisibleTriangleNumber(n):
    i = 1
    toplam = 0
    
    while True:
        # Üçgen sayıyı hesapla: T(i) = i * (i + 1) / 2
        toplam += i
        if carpansayisi(toplam) > n:
            print(toplam)
            break
        i += 1

print(f"Çalışma süresi: {calisma_suresi(divisibleTriangleNumber, 167)} saniye")


'''